#include <EloquentTinyML.h>
#include <eloquent_tinyml/tensorflow.h>
#include <Wire.h>
#include "lorahelper.h"
#include "tf_model.h"

#define N_CHANNELS 5
#define SEG_LENGTH 50

#define N_INPUTS SEG_LENGTH*N_CHANNELS
#define N_OUTPUTS 4

#define TENSOR_ARENA_SIZE 4*1024

Eloquent::TinyML::TensorFlow::TensorFlow<N_INPUTS, N_OUTPUTS, TENSOR_ARENA_SIZE> tf;




#include "imu.h"

#include <Adafruit_GPS.h>
Adafruit_GPS GPS(&Wire);


#define SECRET_APP_EUI "xxxxxxxxxxxxx"
#define SECRET_APP_KEY "yyyyyyyyyyyyyyyyyyyyyyy"

#define I2C_ADDRESS 0x10

uint32_t timer = millis();



unsigned long lastIMUTime = 0;

unsigned int segment_counter = 0;

float predict_data[N_INPUTS];
float prediction[N_OUTPUTS];


#include <RTCZero.h>

/* Create an rtc object */
RTCZero rtc;

#include "WDTZero.h"

WDTZero WatchDogTimer; 




volatile bool GPS_DONE = true;
volatile bool IMU_DONE = true;
volatile bool LORA_DONE = false;


unsigned long fix_count = 0;
unsigned long sent_count = 0;

bool GPS_SLEEP = true;
unsigned int imu_counter = 0;
unsigned int imu_limit = 6*30; // run activity logging for 30 minutes, one activity every 10s 

unsigned long hour_timer = 0;
unsigned long gps_timeout = 1000*60*10; // wait for 10 minutes before giving up on getting a fix

unsigned long lora_timeout = 1000*60*50; // send messages over lora for up to 50 minutes



void setup() 
{
    Serial.begin(115200);
    delay(4000);
    tf.begin(model_tflite);

    // check if model loaded fine
    if (!tf.isOk()) {
      Serial.print("ERROR: ");
      Serial.println(tf.getErrorMessage());
      while (true) delay(1000);
    }

   

   if (!GPS.begin(I2C_ADDRESS)) 
  {
    Serial.println("ERROR: GPS");
    
  }

  //GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_100_MILLIHERTZ);
  GPS.sendCommand(PMTK_API_SET_FIX_CTL_100_MILLIHERTZ);
  

   if (!initialiseIMU())  {Serial.println("ERROR: ICM ");}
   Serial.println("initialised...");

/*  if (!modem.begin(EU868)) {
    Serial.println("Failed to start module");
    while (1) {}
  };
  Serial.print("Your module version is: ");
  Serial.println(modem.version());
  Serial.print("Your device EUI is: ");
  Serial.println(modem.deviceEUI());
  delay(1);
  */
  rtc.begin(); // initialize RTC

  rtc.setAlarmTime(0, 15, 0);
  rtc.enableAlarm(rtc.MATCH_MMSS);
  
  rtc.attachInterrupt(quarter_hour_alarm);

  Serial.print("\nWDTZero-Demo : Setup Soft Watchdog at 32S interval"); 
 WatchDogTimer.attachShutdown(wd_shutdown);
 WatchDogTimer.setup(WDT_SOFTCYCLE16M);  // initialize WDT-softcounter refesh cycle on 16m interval
}

void wd_shutdown()
{
  Serial.print("\nshutting down ...");
}


void quarter_hour_alarm()
{
  WatchDogTimer.clear();
  if (rtc.getMinutes()==0)
  {
    GPS_DONE = true;
    IMU_DONE = true;
    LORA_DONE = false;
    hour_timer = millis();
  }
  Serial.println("Alarm Match!");
}

float latitude;
float longitude;

void loop() 
{
    if (GPS_DONE && IMU_DONE && LORA_DONE) rtc.standbyMode();

    if (!GPS_DONE)
    {
      if (GPS_SLEEP)
      {
        // wake up the GPS
        GPS.wakeup();
      }
      char c = GPS.read();
      if (GPS.newNMEAreceived()) GPS.parse(GPS.lastNMEA());

      if (GPS.fix && GPS.satellites > 3)
      {
        GPS_DONE=true;GPS_SLEEP=true;GPS.standby();
        latitude = GPS.latitude;
        longitude = GPS.longitude;
      }
      if (millis() - hour_timer > gps_timeout)
      {
          GPS_DONE=true;GPS_SLEEP=true;GPS.standby();
          latitude = 0;
          longitude = 0;
      }

    }

    if (!IMU_DONE)
    {

      if ((millis() - lastIMUTime) >= 200) //To stream at 5 Hz without using additional timers
      {
        lastIMUTime = millis();
        //if (segment_counter==SEG_LENGTH) segment_counter=0;

  
        updateIMU(&predict_data[segment_counter*N_CHANNELS]);
        segment_counter++;
        if (segment_counter==SEG_LENGTH)
        {
            tf.predict(predict_data, prediction);
            int activity = tf.probaToClass(prediction);
            if (activity == 0) Serial.println("Walking");
            if (activity == 1) Serial.println("Standing");
            if (activity == 2) Serial.println("Sitting");
            if (activity == 3) Serial.println("Lying");
            segment_counter=0;
            imu_counter++;
        }
        if (imu_counter == imu_limit)
        {
          imu_counter = 0; IMU_DONE=true;
          // save and fix_count++
        }
      }
      return;
    }

    sendLORA(&predict_data[segment_counter*N_CHANNELS]);


}


  
